I"Z<hr />

<p>This internship involves the implementation of a Monte Carlo Path Tracer.</p>

<!--break-->

<h3 id="monte-carlo-path-tracing-renderer">Monte Carlo Path Tracing Renderer</h3>
<p>In this project, you will implement a Monte Carlo Path Tracer. A path tracer is a kind of renderer in computer graphics. A renderer is responsible for generating the image or the graphics that you see on your screen. Even this text that you are reading is displayed via a font renderer. Path tracers are often used for photorealistic rendering, which means generating an image indistinguishable from a photograph. At the end of the project, you can expect to have a code capable of producing such images.</p>

<!--break-->

<p>As a primer, you should read Andrew Glassnerâ€™s <a href="https://www.goodreads.com/book/show/1441550.An_Introduction_to_Ray_Tracing">Introduction to Ray Tracing</a></p>

<!--break-->

<h3 id="pre-requisites">Pre-requisites</h3>
<ul>
  <li>At least two years of experience with CPP, awareness of gcc and make</li>
  <li>A basic course on DSA</li>
</ul>

<!--break-->

<h3 id="tentative-project-timeline">Tentative Project Timeline</h3>

<p>I expect about 100 hours of work spread over ten weeks.</p>

<!--break-->

<table>
  <thead>
    <tr>
      <th>Week Number</th>
      <th>Tasks to be Completed</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Week 1</strong></td>
      <td>Read the book</td>
    </tr>
    <tr>
      <td><strong>Week 2</strong></td>
      <td>Write an XML parser. This is the submodule that reads the scene.</td>
    </tr>
    <tr>
      <td><strong>Week 3</strong></td>
      <td>Write the skeleton of the graphics pipeline. This involves implementing coordinate transformations</td>
    </tr>
    <tr>
      <td><strong>Week 4</strong></td>
      <td>Implement the Ray and Object class. Most of the Path Tracing routine can be summarised as measuring intersection of instances of Ray class with instances of the Object class.</td>
    </tr>
    <tr>
      <td><strong>Week 5</strong></td>
      <td>Implement Direct Lighting and Whitted Ray Tracing</td>
    </tr>
    <tr>
      <td><strong>Week 6</strong></td>
      <td>Implement Recursive Rays to capture higher order light paths</td>
    </tr>
    <tr>
      <td><strong>Week 7</strong></td>
      <td>Debugging buffer &amp; Implement Jittering and Supersampling</td>
    </tr>
    <tr>
      <td><strong>Week 8</strong></td>
      <td>Monte Carlo enters. Learn Sampling. Implement Diffuse Sampling and Area lights. Effects like soft shadows and colour bleeding start to appear</td>
    </tr>
    <tr>
      <td><strong>Week 9</strong></td>
      <td>Debugging Buffer</td>
    </tr>
    <tr>
      <td><strong>Week 10</strong></td>
      <td>Documentation, Generating Scenes, Videos</td>
    </tr>
  </tbody>
</table>

<!--break-->

<h3 id="secondary-learning-goals">Secondary Learning Goals</h3>
<p>Apart from learning about path tracers and rendering, you can expect to learn about the following:</p>
<ul>
  <li>Monte Carlo Sampling</li>
  <li>Basics of ImageMagick</li>
  <li>OpenMP Parallelization.</li>
</ul>

<!--break-->

<h3 id="repositories">Repositories</h3>
<p>The project will be done in groups of two. We will consider minor variations
in the raytracers, Swati (<a href="https://github.com/wncc/swati-rt">swati-rt</a>) and Revati (<a href="https://github.com/wncc/revati-rt">revati-rt</a>)</p>
:ET